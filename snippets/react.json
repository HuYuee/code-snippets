{
	"react_comp_func": {
		"prefix": "$react_comp_func",
		"body": [
			"import React from 'react';",
			"",
			"const ${1:BaseComp} = () => (",
			"    <div>${2: Content}</div>",
			");",
			"export default $1;"
		],
		"description": "func无状态组件"
	},
	"react_comp_func_return": {
		"prefix": "$react_comp_func_return",
		"body": [
			"import React from 'react';",
			"",
			"const ${1:BaseComp} = () => {",
			"    return (",
			"        <div>${2:Content}</div>",
			"    )",
			"}",
			"export default $1;"
		],
		"description": "无状态带return"
	},
	"react_comp_state_redux": {
		"prefix": "$react_comp_state_redux",
		"body": [
			"import React, {Component} from 'react';",
			"import PropTypes from 'prop-types';",
			"import {bindActionCreators} from 'redux';",
			"import {connect} from 'react-redux';",
			"import Counter from 'root/components/Counter';",
			"import * as countAction from 'path/action.js';",
			"",
			"class Home extends Component {",
			"    static propTypes = {",
			"        count: PropTypes.number.isRequired,",
			"        actions: PropTypes.object.isRequired",
			"    };",
			"",
			"    state = {",
			"        showName: 'loading user'",
			"    };",
			"",
			"    getUser = (url) => {",
			"        // do something",
			"    };",
			"",
			"    componentDidMount() {",
			"        const url = '/api/getUser';",
			"        this.getUser(url);",
			"    }",
			"",
			"    render() {",
			"        const {props, state} = this;",
			"        return (",
			"            <div>",
			"                <p>USER: {state.showName}</p>",
			"                <Counter",
			"                    count={props.count}",
			"                    increCount={props.actions.increment}",
			"                    decreCount={props.actions.decrement}",
			"                />",
			"            </div>",
			"        );",
			"    }",
			"}",
			"const mapStateToProps = (state) => ({count: state.countState.count});",
			"const mapDisPatchToProps = (dispatch) => ({",
			"    actions: bindActionCreators(countAction, dispatch)",
			"});",
			"",
			"export default connect(",
			"    mapStateToProps,",
			"    mapDisPatchToProps",
			")(Home);"
		],
		"description": "state组件with redux"
	},
	"react_import": {
		"prefix": "$react_import",
		"body": [
			"import React, {Component} from 'react';",
			"import PropTypes from 'prop-types';",
			"import {bindActionCreators} from 'redux';",
			"import {connect} from 'react-redux';",
			"import {Provider} from 'react-redux';"
		],
		"description": "import"
	},
	"react_entry": {
		"prefix": "$react_entry",
		"body": [
			"import React from 'react';",
			"import ReactDOM from 'react-dom';",
			"import {Provider} from 'react-redux';",
			"// import store from './redux/store.js';",
			"// import App from './router';",
			"",
			"// createstore",
			"import {createStore, combineReducers, applyMiddleware, compose} from 'redux';",
			"import * as home from './home/reducer.js';",
			"import dataBoardCreate from './dataBoardCreate/reducer.js';",
			"import dataGroup from './dataGroup/reducer.js';",
			"import sourceAdd from './sourceAdd/reducer.js';",
			"import chartData from './chartData/reducer.js';",
			"import thunk from 'redux-thunk';",
			"const store = createStore(",
			"    combineReducers({...home, dataBoardCreate, dataGroup, sourceAdd, chartData}),",
			"    compose(",
			"        applyMiddleware(thunk),",
			"        window.devToolsExtension ? window.devToolsExtension() : f => f",
			"    )",
			");",
			"",
			"// router",
			"import {BrowserRouter, Route, Switch} from 'react-router-dom';",
			"import DashBoard from 'path/to/DashBoard';",
			"import Login from 'path/to/Login';",
			"import Register from 'path/to/Register';",
			"// react-router4 不推荐集中路由 组件在哪里匹配就在哪里渲染",
			"const App = () => (",
			"    <BrowserRouter>",
			"        <Switch>",
			"            <Route path=\"/login\" component={Login} />",
			"            <Route path=\"/register\" component={Register} />",
			"            <Route component={DashBoard} />",
			"        </Switch>",
			"    </BrowserRouter>",
			");",
			"",
			"// index.js内容",
			"const render = Component => {",
			"    ReactDOM.render(",
			"        <Provider store={store}>",
			"            <Component />",
			"        </Provider>",
			"        , document.querySelector(\"#root\")",
			"    )",
			"};",
			"",
			"render(App);"
		],
		"description": "入口包含：store,router,render"
	},
	"react_comp_constructor": {
		"prefix": "$react_comp_constructor",
		"body": [
			"import React, {Component} from 'react';",
			"",
			"class $1 extends Component {",
			"    constructor(props) {",
			"        super(props);",
			"        this.state = { $2 };",
			"    }",
			"    render() {",
			"        return (",
			"        $3",
			"        );",
			"    }",
			"}",
			"  ",
			"export default $1;"
		],
		"description": "base组件"
	},
	"react_comp_stateless_withrouter": {
		"prefix": "$react_comp_stateless_withrouter",
		"body": [
			"import React from 'react';",
			"import PropTypes from 'prop-types';",
			"import {Button, Icon, message} from 'antd';",
			"import {withRouter} from 'react-router';",
			"",
			"import './index.less';",
			"",
			"",
			"const goBackList = (history, resetData) => {",
			"    return ()=>{",
			"        // history.goBack();",
			"        resetData();",
			"        history.push('/sourceAdd');",
			"    }",
			"}",
			"",
			"",
			"const C = ({projectName, dimension, target, selectInfo, history, resetData}) => (",
			"    <head className=\"source-head\">",
			"        <div className=\"back-zone\">",
			"            <Icon",
			"                type=\"left\"",
			"                style={{ fontSize: 16, color: '#08c' }}",
			"                onClick={goBackList(history, resetData)}",
			"            />",
			"        </div>",
			"        <div className=\"title-zone\">{projectName}</div>",
			"        <div className=\"btn-zone\">",
			"            <Button onClick={goBackList(history, resetData)}>取消</Button>",
			"            <Button ",
			"                type=\"primary\"",
			"                onClick={",
			"                    (e) => {",
			"                        if(dimension.length === 0 || target.length === 0 ) {",
			"                            message.error('维度和指标不能为空!');",
			"                        } else {",
			"                            message.success('可以发送请求了!');",
			"                            console.log(",
			"                                '发送请求需要的字段',",
			"                                '\\n选择的数据表:',selectInfo[0].id,",
			"                                '\\n项目名:',projectName,",
			"                                '\\n维度:', dimension,",
			"                                '\\n指标:', target,",
			"                            )",
			"                            // 发请求保存修改或增加数据集",
			"                        }",
			"                    }",
			"                }",
			"            >",
			"                保存",
			"            </Button>",
			"        </div>",
			"    </head>",
			"    ",
			");",
			"",
			"",
			"C.propTypes = {",
			"    projectName: PropTypes.string.isRequired,",
			"    dimension: PropTypes.array.isRequired,",
			"    target: PropTypes.array.isRequired",
			"};",
			"",
			"const EditHeader = withRouter(C);",
			"export default EditHeader;"
		],
		"description": "无状态组件获取history"
	},
	"react_comp_list": {
		"prefix": "$react_comp_list",
		"body": [
			"function NumberList(props) {",
			"    const numbers = props.numbers;",
			"    const listItems = numbers.map((number) =>",
			"        <li key={number.toString()}>",
			"        {number}",
			"        </li>",
			"    );",
			"    return (",
			"        <ul>{listItems}</ul>",
			"    );",
			"}",
			"  ",
			"const numbers = [1, 2, 3, 4, 5];",
			"ReactDOM.render(",
			"    <NumberList numbers={numbers} />,",
			"    document.getElementById('root')",
			");"
		],
		"description": "组件中包含数组"
	},
	"react_comp_&&": {
		"prefix": "$react_comp_&&",
		"body": [
			"function Mailbox(props) {",
			"const unreadMessages = props.unreadMessages;",
			"    return (",
			"        <div>",
			"        <h1>Hello!</h1>",
			"        {unreadMessages.length > 0 &&",
			"            <h2>",
			"            You have {unreadMessages.length} unread messages.",
			"            </h2>",
			"        }",
			"        </div>",
			"    );",
			"}",
			"  ",
			"const messages = ['React', 'Re: React', 'Re:Re: React'];",
			"ReactDOM.render(",
			"    <Mailbox unreadMessages={messages} />,",
			"    document.getElementById('root')",
			");"
		],
		"description": "组件连接"
	},
	"react_comp_ref": {
		"prefix": "$react_comp_ref",
		"body": [
			"class NameForm extends React.Component {",
			"    constructor(props) {",
			"        super(props);",
			"        this.handleSubmit = this.handleSubmit.bind(this);",
			"    }",
			"",
			"    handleSubmit(event) {",
			"        alert('A name was submitted: ' + this.input.value);",
			"        event.preventDefault();",
			"    }",
			"",
			"    render() {",
			"        return (",
			"        <form onSubmit={this.handleSubmit}>",
			"            <label>",
			"            Name:",
			"            <input type=\"text\" ref={(input) => this.input = input} />",
			"            </label>",
			"            <input type=\"submit\" value=\"Submit\" />",
			"        </form>",
			"        );",
			"    }",
			"}"
		],
		"description": "非受控组件ref"
	},
	"react_comp_cycle": {
		"prefix": "$react_comp_cycle",
		"body": [
			"// lifecycle",
			"",
			"// first load",
			"componentWillMount() {}",
			"componentDidMount() {}",
			"",
			"// update",
			"componentWillReceiveProps() {}",
			"shouldComponentUpdate() {}",
			"componentWillUpdate() {}",
			"componentDidUpdate() {}",
			"",
			"// uninstall",
			"componentWillUnmount() {}"
		],
		"description": "组件生命周期"
	},
	"react_comp_redux_base": {
		"prefix": "$react_comp_redux_base",
		"body": [
			"import React, {Component} from 'react';",
			"import {Icon} from 'antd';",
			"import {connect} from 'react-redux';",
			"import {showWindow} from 'root/redux/dataList/action';",
			"class CreateCard extends Component {",
			"    render() {",
			"        const {showWindow, show} = this.props;",
			"        return (",
			"            <div className=\"datalist-box\" onClick={showWindow}>",
			"                <Icon",
			"                    type=\"plus\"",
			"                    style={{ fontSize: 16, color: '#08c' }}",
			"                />",
			"                <span>创建数据集</span>",
			"                <span>\"{this.props.show}\"</span>",
			"            </div>",
			"        )",
			"    }",
			"}",
			"const mapStateToProps = (state) => ({",
			"    show: state.dataList.showWindow",
			"})",
			"const mapDispatchToProps = (dispatch) => ({",
			"    showWindow:  ()=> dispatch(showWindow())",
			"})",
			"export default connect(",
			"    mapStateToProps,",
			"    mapDispatchToProps",
			")(CreateCard)"
		],
		"description": "原始redux组件"
	},
	"react_online_redux_action": {
		"prefix": "$react_online_redux_action",
		"body": [
			"// redux-action 写法",
			"// https://codepen.io/onvno/pen/eMJLMg"
		],
		"description": "redux-action在线demo"
	},
	"react_danger": {
		"prefix": "$react_danger",
		"body": [
			"function createMarkup() { return {__html: 'First &middot; Second'}; };",
			"<div dangerouslySetInnerHTML={createMarkup()} />"
		],
		"description": "插入字符串"
	},
	"react_children": {
		"prefix": "$react_children",
		"body": [
			"import React, {Component} from 'react';",
			"import ReactDOM from 'react-dom';",
			"",
			"class NotesList extends Component {",
			"  constructor(props) {",
			"    super(props);",
			"  }",
			"",
			"  render() {",
			"    return (",
			"      <ul>",
			"        {",
			"          React.Children.map(this.props.children, function(child) {",
			"            return <li>{child}</li>",
			"          })",
			"        }",
			"      </ul>",
			"    )",
			"  }",
			"}",
			"",
			"ReactDOM.render(",
			"  <NotesList>",
			"    <span>hello</span>",
			"    <span>world</span>",
			"  </NotesList>,",
			"  document.getElementById('root')",
			");"
		],
		"description": "包含子组件写法"
	},
	"react_router_base": {
		"prefix": "$react_router_base",
		"body": [
			"//官方地址:https://reacttraining.com/react-router/web/example/basic",
			"//github示例地址:https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/docs/guides/basic-components.md",
			"import React from \"react\";",
			"import ReactDOM from 'react-dom';",
			"import { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";",
			"",
			"const BasicExample = () => (",
			"  <Router>",
			"    <div>",
			"      <ul>",
			"        <li>",
			"          <Link to=\"/\">Home</Link>",
			"        </li>",
			"        <li>",
			"          <Link to=\"/about\">About</Link>",
			"        </li>",
			"        <li>",
			"          <Link to=\"/topics\">Topics</Link>",
			"        </li>",
			"      </ul>",
			"",
			"      <hr />",
			"      <Switch>",
			"        <Route exact path=\"/\" component={Home} />",
			"        <Route path=\"/about\" component={About} />",
			"        <Route path=\"/topics\" component={Topics} />",
			"      </Switch>",
			"    </div>",
			"  </Router>",
			");",
			"",
			"const Home = () => (",
			"  <div>",
			"    <h2>Home</h2>",
			"  </div>",
			");",
			"",
			"const About = () => (",
			"  <div>",
			"    <h2>About</h2>",
			"  </div>",
			");",
			"",
			"const Topics = ({ match }) => (",
			"  <div>",
			"    <h2>Topics</h2>",
			"    <ul>",
			"      <li>",
			"        <Link to={`${match.url}/rendering`}>Rendering with React</Link>",
			"      </li>",
			"      <li>",
			"        <Link to={`${match.url}/components`}>Components</Link>",
			"      </li>",
			"      <li>",
			"        <Link to={`${match.url}/props-v-state`}>Props v. State</Link>",
			"      </li>",
			"    </ul>",
			"",
			"    <Route path={`${match.url}/:topicId`} component={Topic} />",
			"    <Route",
			"      exact",
			"      path={match.url}",
			"      render={() => <h3>Please select a topic.</h3>}",
			"    />",
			"  </div>",
			");",
			"",
			"const Topic = ({ match }) => (",
			"  <div>",
			"    <h3>{match.params.topicId}</h3>",
			"  </div>",
			");",
			"",
			"export default BasicExample;"
		],
		"description": "router基本demo"
	},
	"react_proptypes_demo": {
		"prefix": "$react_proptypes_demo",
		"body": [
			"import PropTypes from 'prop-types';",
			"",
			"class Greeting extends React.Component {",
			"  render() {",
			"    return (",
			"      <h1>Hello, {this.props.name}</h1>",
			"    );",
			"  }",
			"}",
			"",
			"Greeting.propTypes = {",
			"  name: PropTypes.string",
			"};"
		],
		"description": "proptype校验"
	},
	"react_proptypes_collection": {
		"prefix": "$react_proptypes_collection",
		"body": [
			"import PropTypes from 'prop-types';",
			"",
			"MyComponent.propTypes = {",
			"  // You can declare that a prop is a specific JS type. By default, these",
			"  // are all optional.",
			"  optionalArray: PropTypes.array,",
			"  optionalBool: PropTypes.bool,",
			"  optionalFunc: PropTypes.func,",
			"  optionalNumber: PropTypes.number,",
			"  optionalObject: PropTypes.object,",
			"  optionalString: PropTypes.string,",
			"  optionalSymbol: PropTypes.symbol,",
			"",
			"  // Anything that can be rendered: numbers, strings, elements or an array",
			"  // (or fragment) containing these types.",
			"  optionalNode: PropTypes.node,",
			"",
			"  // A React element.",
			"  optionalElement: PropTypes.element,",
			"",
			"  // You can also declare that a prop is an instance of a class. This uses",
			"  // JS's instanceof operator.",
			"  optionalMessage: PropTypes.instanceOf(Message),",
			"",
			"  // You can ensure that your prop is limited to specific values by treating",
			"  // it as an enum.",
			"  optionalEnum: PropTypes.oneOf(['News', 'Photos']),",
			"",
			"  // An object that could be one of many types",
			"  optionalUnion: PropTypes.oneOfType([",
			"    PropTypes.string,",
			"    PropTypes.number,",
			"    PropTypes.instanceOf(Message)",
			"  ]),",
			"",
			"  // An array of a certain type",
			"  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),",
			"",
			"  // An object with property values of a certain type",
			"  optionalObjectOf: PropTypes.objectOf(PropTypes.number),",
			"",
			"  // An object taking on a particular shape",
			"  optionalObjectWithShape: PropTypes.shape({",
			"    color: PropTypes.string,",
			"    fontSize: PropTypes.number",
			"  }),",
			"",
			"  // You can chain any of the above with `isRequired` to make sure a warning",
			"  // is shown if the prop isn't provided.",
			"  requiredFunc: PropTypes.func.isRequired,",
			"",
			"  // A value of any data type",
			"  requiredAny: PropTypes.any.isRequired,",
			"",
			"  // You can also specify a custom validator. It should return an Error",
			"  // object if the validation fails. Don't `console.warn` or throw, as this",
			"  // won't work inside `oneOfType`.",
			"  customProp: function(props, propName, componentName) {",
			"    if (!/matchme/.test(props[propName])) {",
			"      return new Error(",
			"        'Invalid prop `' + propName + '` supplied to' +",
			"        ' `' + componentName + '`. Validation failed.'",
			"      );",
			"    }",
			"  },",
			"",
			"  // You can also supply a custom validator to `arrayOf` and `objectOf`.",
			"  // It should return an Error object if the validation fails. The validator",
			"  // will be called for each key in the array or object. The first two",
			"  // arguments of the validator are the array or object itself, and the",
			"  // current item's key.",
			"  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {",
			"    if (!/matchme/.test(propValue[key])) {",
			"      return new Error(",
			"        'Invalid prop `' + propFullName + '` supplied to' +",
			"        ' `' + componentName + '`. Validation failed.'",
			"      );",
			"    }",
			"  })",
			"};",
			""
		],
		"description": "proptype集合"
	},
	"react_import_img": {
		"prefix": "$react_import_img",
		"body": [
			"// import png",
			"import xxx from './xxx.png'",
			"<img src={xxx} />"
		],
		"description": "import图片"
	},
	"react_require_img": {
		"prefix": "$react_require_img",
		"body": [
			"// require img",
			"<img src={require('./xxx.png')} />"
		],
		"description": "requrie图片"
	},
	"react_img": {
		"prefix": "$react_img",
		"body": [
			"// import",
			"import xxx from './xxx.png'",
			"<img src={xxx} />",
			"",
			"// require",
			"<img src={require('./xxx.png')} />"
		],
		"description": "插入图片"
	},
	"react_img_folder": {
		"prefix": "$react_img_folder",
		"body": [
			"function importAll(r) {",
			"    let images = {};",
			"    r.keys().map((item, index) => { images[item.replace('./', '')] = r(item); });",
			"    return images;",
			"}",
			"",
			"const images = importAll(require.context('./images', false, /\\.(png|jpe?g|svg)$/));",
			"",
			"<img src={images['doggy.png']} />"
		],
		"description": "引入图片文件夹"
	}
}